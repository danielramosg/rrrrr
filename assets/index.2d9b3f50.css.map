{"mappings":"AE4NI,8DAgCE,6FAIA,wF,2WCtNJ,sFAIA,kMASE,2E,+C,kI,oDCeF,sDAGE,gEAIA,4EAIF,8E,4C,2C,+CFwIA,8CAGE,sDAAA,8DAGA,gLAWE,iEAGF,kG,uDASE,iE,0DAMA,8EAAA,6FAIA,0DAAA,wFAGE,oD,iDG1FR,iDAGE,+C,yNCxBA,kDAGE,gFAGE,oD,iK,mVCNF,sHAQA,+IAIA,8IAUE,4DAGF,uDAGF,8CAGE,oF,+J,4ECpIF,qDAGE,oLAYA,yE,yQCZA,iGAIA,kL,yDCuHJ,8IAKI,6CAGJ,+DAGE,0GAGF,0FAMA","sources":["assets/index.2d9b3f50.css","9900ce7f53d86402","src/vue/components/ControlPanelTabParameterTransforms.vue","src/vue/components/MarkerUnderlay.vue","src/vue/components/ScoreTable.vue","src/vue/components/ControlPanelTabImportExport.vue","src/vue/components/ControlPanel.vue","src/vue/components/MarkerSlot.vue","src/vue/components/GameCard.vue","src/vue/components/CardSlot.vue","src/vue/components/App.vue"],"sourcesContent":[".parameter-transforms > :last-child textarea, .parameter-transforms > :last-child input[type=\"text\"] {\n  width: 100%;\n}\n\n.parameter-transforms .available > div .edit, .parameter-transforms .available > div input[type=\"checkbox\"] {\n  margin-left: .5ex;\n  margin-right: .5ex;\n}\n\n.parameter-transforms .available > div .edit, .parameter-transforms .available > div input[type=\"checkbox\"]:not(:disabled) {\n  cursor: pointer;\n}\n\n.marker[data-v-9f6c2c] {\n  --blur-radius: 15px;\n  --outline-width: 6px;\n  left: calc(1px * var(--marker-position-x));\n  top: calc(1px * var(--marker-position-y));\n  width: calc(1px * var(--marker-diameter));\n  height: calc(1px * var(--marker-diameter));\n  transform-origin: 0 0;\n  place-items: center;\n  font-family: sans-serif;\n  font-size: x-large;\n  display: grid;\n  position: absolute;\n  transform: translate(-50%, -50%);\n}\n\n.marker [data-v-9f6c2c] {\n  pointer-events: none;\n  -webkit-user-select: none;\n  user-select: none;\n}\n\n.marker .circle[data-v-9f6c2c] {\n  filter: blur(var(--blur-radius));\n  background-color: #d3d3d380;\n  border-radius: 50%;\n  outline: 6px solid #000000bf;\n  width: 100%;\n  height: 100%;\n  position: absolute;\n}\n\n.marker .circle.active[data-v-9f6c2c] {\n  background-color: #37afda80;\n}\n\n.marker-underlay[data-v-7331b8] {\n  cursor: pointer;\n}\n\n.scores[data-v-f8eb84] {\n  table-layout: fixed;\n  padding-bottom: 1.4ex;\n  padding-right: 2.5ex;\n  font-size: 38px;\n  display: table;\n  position: absolute;\n}\n\n.scores .table-row[data-v-f8eb84] {\n  display: table-row;\n}\n\n.scores .table-cell[data-v-f8eb84] {\n  display: table-cell;\n}\n\n.scores .score-column[data-v-f8eb84] {\n  text-align: right;\n  width: 9ex;\n}\n\n.scores .primary[data-v-f8eb84] {\n  font-family: Jost, sans-serif;\n  font-weight: 700;\n}\n\n.scores .secondary[data-v-f8eb84] {\n  font-family: Jost, sans-serif;\n  font-weight: 500;\n}\n\ninput[type=\"range\"][data-v-da743b] {\n  width: 100%;\n}\n\n.parameter-transforms {\n  gap: 2em;\n  display: flex;\n}\n\n.parameter-transforms > :first-child {\n  flex-grow: 0;\n}\n\n.parameter-transforms > :last-child {\n  flex-grow: 3;\n}\n\n.parameter-transforms > :last-child textarea, .parameter-transforms > :last-child input[type=\"text\"] {\n  width: 100%;\n}\n\n.parameter-transforms .available {\n  -ms-overflow-style: none;\n  scrollbar-width: none;\n  border: 1px solid;\n  min-width: 300px;\n  max-width: 300px;\n  min-height: 20px;\n  max-height: 900px;\n  overflow: scroll;\n}\n\n.parameter-transforms .available::-webkit-scrollbar {\n  display: none;\n}\n\n.parameter-transforms .available > div {\n  outline: 1px solid;\n  flex-wrap: nowrap;\n  padding: .2ex;\n  display: flex;\n}\n\n.parameter-transforms .available > div label {\n  flex-grow: 1;\n}\n\n.parameter-transforms .available > div label.draggable {\n  cursor: grab;\n}\n\n.parameter-transforms .available > div > * {\n  white-space: nowrap;\n}\n\n.parameter-transforms .available > div .edit, .parameter-transforms .available > div input[type=\"checkbox\"] {\n  margin-left: .5ex;\n  margin-right: .5ex;\n}\n\n.parameter-transforms .available > div .edit, .parameter-transforms .available > div input[type=\"checkbox\"]:not(:disabled) {\n  cursor: pointer;\n}\n\n.slot-group-transforms {\n  height: 700px;\n  overflow: scroll;\n}\n\n.success[data-v-6adaee] {\n  background-color: #90ee90;\n}\n\n.unknown[data-v-6adaee] {\n  background-color: #ffffe0;\n}\n\n.error[data-v-6adaee] {\n  background-color: #f08080;\n}\n\n.control-panel[data-v-d9018e] {\n  width: calc(1px * var(--app-width) / 4);\n  box-sizing: border-box;\n  transform-origin: 100% 0;\n  background-color: #fff;\n  border-left: 1px solid;\n  height: 50%;\n  position: absolute;\n  top: 0;\n  right: 0;\n  transform: scale(2);\n}\n\n.control-panel nav[data-v-d9018e] {\n  padding-top: 1ex;\n}\n\n.control-panel nav button[disabled][data-v-d9018e] {\n  text-decoration: line-through;\n}\n\n.control-panel .tab-pane[data-v-d9018e] {\n  padding: 1em;\n}\n\n.overlay-background[data-v-b56a24] {\n  background-repeat: no-repeat;\n  background-position-x: calc(1px * var(--overlay-x));\n  background-position-y: calc(1px * var(--overlay-y));\n}\n\n.slot[data-v-36b335] {\n  left: calc(1px * var(--slot-x));\n  top: calc(1px * var(--slot-y));\n  width: calc(1px * var(--slot-diameter));\n  height: calc(1px * var(--slot-diameter));\n  transform-origin: center;\n  transform: translate(-50%, -50%) rotate(var(--slot-angle));\n  text-align: center;\n  place-items: center;\n  font-family: sans-serif;\n  font-size: x-large;\n  display: grid;\n  position: absolute;\n}\n\n.slot > .asset-container[data-v-36b335] {\n  width: 100%;\n  height: 100%;\n  position: absolute;\n  top: 0;\n  left: 0;\n  transform: translate(0%, 50%);\n}\n\n.slot > .asset-container > img[data-v-36b335] {\n  transform: translateX(calc(1px * var(--asset-x))) translateY(calc(1px * var(--asset-y)));\n  position: absolute;\n}\n\n.slot > .circle[data-v-36b335] {\n  box-sizing: content-box;\n  border-radius: 50%;\n  outline: 2px solid;\n  width: 100%;\n  height: 100%;\n  position: absolute;\n  top: 0;\n  left: 0;\n}\n\n.slot > .circle.inactive[data-v-36b335] {\n  outline-color: #a9a9a9;\n}\n\n.slot > .circle.active[data-v-36b335] {\n  outline-color: #000;\n}\n\n.slot .label[data-v-36b335] {\n  position: absolute;\n}\n\n.slot [data-v-36b335] {\n  pointer-events: none;\n  -webkit-user-select: none;\n  user-select: none;\n}\n\n.action-card[data-v-f18a87] {\n  --inactive-card-filter: invert(1) brightness(.4) invert(1);\n  left: calc(1px * var(--card-x));\n  top: calc(1px * var(--card-y));\n  position: absolute;\n}\n\n.action-card[data-v-f18a87]:not(.active) {\n  filter: var(--inactive-card-filter);\n}\n\n.action-card .image[data-v-f18a87] {\n  position: relative;\n}\n\n.action-card .label[data-v-f18a87] {\n  text-align: center;\n  place-items: center;\n  width: 100%;\n  height: 100%;\n  font-family: sans-serif;\n  font-size: x-large;\n  display: grid;\n  position: absolute;\n  top: 0;\n  left: 0;\n}\n\n.action-card .highlight[data-v-f18a87] {\n  background: #fff7;\n}\n\n.card-slot[data-v-8294c5] {\n  transform-origin: 0 0;\n  --card-x-px: calc(1px * var(--card-x));\n  --card-y-px: calc(1px * var(--card-y));\n  transform: translateX(var(--card-x-px)) translateY(var(--card-y-px)) rotate(calc(1deg * var(--card-angle)));\n  width: 202px;\n  height: 275px;\n  position: absolute;\n}\n\n.card-slot.dev-mode[data-v-8294c5] {\n  background-color: #ffffff80;\n  outline: 2px dotted gray;\n}\n\n.card-slot > .label[data-v-8294c5] {\n  text-align: center;\n  place-items: center;\n  width: 100%;\n  height: 100%;\n  font-family: sans-serif;\n  font-size: x-large;\n  display: grid;\n  position: absolute;\n  top: 0;\n  left: 0;\n}\n\n.illustration-panel[data-v-7671b3] {\n  background-color: #fff;\n}\n\n.viz-panel > #model-viz-container[data-v-7671b3] {\n  width: calc(1px * var(--svg-width));\n  transform: scale(var(--svg-scale-factor));\n  transform-origin: 0 0;\n}\n\n.slot-panel[data-v-7671b3] {\n  touch-action: none;\n}\n\n.pointer-events-fallthrough[data-v-7671b3] {\n  pointer-events: none;\n}\n\n.score[data-v-7671b3], .score-bottom-right[data-v-7671b3], .score-top-left[data-v-7671b3] {\n  position: absolute;\n}\n\n.score-top-left[data-v-7671b3] {\n  transform-origin: center;\n  top: 0;\n  left: 0;\n  transform: rotate(180deg);\n}\n\n.score-bottom-right[data-v-7671b3] {\n  bottom: 0;\n  right: 0;\n}\n/*# sourceMappingURL=index.2d9b3f50.css.map */\n","@import \"e9db3caaf078d42b\";\n@import \"5100861d807143cb\";\n@import \"979de8b543a8b46a\";\n@import \"0e19a8b66b192c49\";\n@import \"a6de3dd6d9112598\";\n@import \"ff49f7e60f0e3a3b\";\n@import \"9faa9d21119178cf\";\n@import \"6b9caebee210092c\";\n@import \"a37a1ea91e5ce77b\";\n@import \"b50c7987d3be007c\";\n@import \"e8f85e180decbdf1\";\n@import \"99d2025a75b4422d\";\n@import \"a9b2cdc35cd396f7\";\n@import \"cad2cce0dd604c1d\";\n@import \"6b470d7514635d78\";\n@import \"a4e0fbdff145ab70\";\n@import \"4602e0f18243ad46\";\n@import \"3acb44b13c93903d\";\n@import \"ca6ea4bbf6096c9f\";\n@import \"8e9119abd0561dfb\";\n@import \"fd8f1b526bd7bd84\";\n@import \"282e0eecaeeb2db3\";\n@import \"34469b62c4744a31\";\n@import \"6fa5b5086499497a\";\n@import \"6014ff0a7f3b728a\";\n@import \"3d0f1a6ce00fdcce\";\n","<script setup lang=\"ts\">\nimport type { ElementOf } from 'ts-essentials';\n\nimport { strict as assert } from 'assert';\nimport { onMounted, ref } from 'vue';\nimport Sortable from 'sortablejs';\n\nimport type { Parameters } from '../../ts/circular-economy-model';\n\nimport { useModelStore } from '../../ts/stores/model';\nimport { useParameterTransformsStore } from '../../ts/stores/parameter-transforms';\nimport {\n  type ParameterTransformState,\n  useParameterTransformId,\n  useSlotGroupsStore,\n} from '../../ts/stores/slot-groups';\n\nconst { transformedParametersExt } = useModelStore();\nconst parameterTransformsStore = useParameterTransformsStore();\nconst { slotGroups, nonInternalSlotGroups, internalSlotGroup } =\n  useSlotGroupsStore();\n\nconst newId = ref('');\nconst newScript = ref('');\n\nfunction select({ id }: ParameterTransformState) {\n  newId.value = id;\n  newScript.value =\n    parameterTransformsStore.parameterTransforms.find((pt) => pt.id === id)\n      ?.script ?? '';\n}\n\nfunction addOrModify(id: string, script: string) {\n  parameterTransformsStore.addOrModify(id, script);\n\n  const internalIndex = internalSlotGroup.parameterTransforms.findIndex(\n    (pt) => pt.id === id,\n  );\n  if (internalIndex === -1) {\n    // The parameter transform is not yet in the internal slot group, so we add it\n    const newParameterTransformState: ParameterTransformState =\n      useParameterTransformId(id);\n    internalSlotGroup.parameterTransforms.push(newParameterTransformState);\n  }\n}\n\nfunction remove(id: string) {\n  const usedNonInternally =\n    nonInternalSlotGroups\n      .flatMap(({ parameterTransforms }) => parameterTransforms)\n      .findIndex((pt) => pt.id === id) !== -1;\n\n  if (usedNonInternally) {\n    alert(\n      'Cannot remove parameter transform that is still used in a non-internal slot group',\n    );\n    return;\n  }\n\n  const nextInternalIndex = () =>\n    internalSlotGroup.parameterTransforms.findIndex((pt) => pt.id === id);\n\n  for (\n    let internalIndex = nextInternalIndex();\n    internalIndex !== -1;\n    internalIndex = nextInternalIndex()\n  ) {\n    internalSlotGroup.parameterTransforms.splice(internalIndex, 1);\n  }\n  parameterTransformsStore.remove(id);\n}\n\nfunction move(from: number, to: number) {\n  parameterTransformsStore.move(from, to);\n}\n\nfunction deactivateAllInternal() {\n  internalSlotGroup.parameterTransforms.forEach((pt) => {\n    // eslint-disable-next-line no-param-reassign\n    pt.active = false;\n  });\n}\n\nconst createTooltip = (\n  slotGroup: ElementOf<typeof slotGroups>,\n  parameterTransformState: ParameterTransformState,\n): string => {\n  const slotGroupIndex = slotGroups.findIndex((sg) => sg === slotGroup);\n  assert(slotGroupIndex !== -1);\n  const slotGroupTransformedParametersExt =\n    transformedParametersExt[slotGroupIndex];\n\n  const parameterTransformIndex = slotGroup.parameterTransforms.findIndex(\n    (pts) => pts === parameterTransformState,\n  );\n  assert(parameterTransformIndex !== -1);\n\n  const step = slotGroupTransformedParametersExt.steps[parameterTransformIndex];\n  const { active, script, diff } = step;\n\n  const pToS = (p: Partial<Parameters>) => JSON.stringify(p, null, 2);\n\n  return active\n    ? `Diff: ${pToS(diff)}\\n\\nScript:\\n${script}`\n    : `Script:\\n${script}`;\n};\n\nconst availableContainer = ref<HTMLDivElement | null>(null);\n\nonMounted(() => {\n  assert(availableContainer.value);\n\n  Sortable.create(availableContainer.value, {\n    onEnd: (event) => {\n      const { newDraggableIndex, oldDraggableIndex } = event;\n      assert(typeof newDraggableIndex !== 'undefined');\n      assert(typeof oldDraggableIndex !== 'undefined');\n      move(oldDraggableIndex, newDraggableIndex);\n    },\n  });\n});\n</script>\n\n<template>\n  <div id=\"parameter-transforms\" class=\"parameter-transforms\">\n    <div>\n      Internal (applied first):\n      <div ref=\"availableContainer\" class=\"available\">\n        <div\n          class=\"parameter-transform\"\n          v-for=\"pt in internalSlotGroup.parameterTransforms\"\n          :key=\"pt.uuid\"\n          :id=\"pt.uuid\"\n          :data-id=\"pt.id\"\n          :title=\"createTooltip(internalSlotGroup, pt)\"\n        >\n          <label class=\"draggable\">\n            <input\n              type=\"checkbox\"\n              :name=\"pt.id\"\n              :value=\"pt.id\"\n              v-model=\"pt.active\"\n            /><span class=\"draggable\">{{ pt.id }}</span></label\n          >\n          <span class=\"edit\" @click=\"select(pt)\">✎</span>\n        </div>\n      </div>\n      <br />\n      <input\n        type=\"button\"\n        value=\"Deactivate active internal transforms\"\n        @click=\"deactivateAllInternal()\"\n      />\n    </div>\n    <div>\n      <div>\n        Id:<br />\n        <input\n          type=\"text\"\n          v-model=\"newId\"\n          name=\"parameter-transform-id\"\n        /><br />\n        Script:<br />\n        <textarea\n          v-model=\"newScript\"\n          rows=\"5\"\n          cols=\"10\"\n          name=\"parameter-transform-script\"\n        ></textarea\n        ><br />\n        <input\n          type=\"button\"\n          value=\"Add/Modify\"\n          @click=\"addOrModify(newId, newScript)\"\n        />\n        <input type=\"button\" value=\"Delete\" @click=\"remove(newId)\" />\n      </div>\n      <div class=\"slot-group-transforms\">\n        <div\n          v-for=\"slotGroup in nonInternalSlotGroups\"\n          :key=\"slotGroup.id\"\n          :data-id=\"slotGroup.id\"\n        >\n          <br />\n          Slot group '{{ slotGroup.id }}':\n          <div class=\"available\">\n            <div\n              v-for=\"pt in slotGroup.parameterTransforms\"\n              :key=\"pt.uuid\"\n              :data-id=\"pt.id\"\n              :title=\"createTooltip(slotGroup, pt)\"\n            >\n              <label>\n                <input\n                  type=\"checkbox\"\n                  :name=\"pt.id\"\n                  :value=\"pt.id\"\n                  v-model=\"pt.active\"\n                  disabled\n                />{{ pt.id }}</label\n              >\n              <span class=\"edit\" @click=\"select(pt)\">✎</span>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  </div>\n</template>\n\n<style lang=\"scss\">\n.parameter-transforms {\n  display: flex;\n  gap: 2em;\n\n  & > *:first-child {\n    flex-grow: 0;\n  }\n\n  & > *:last-child {\n    flex-grow: 3;\n\n    & input[type='text'],\n    & textarea {\n      width: 100%;\n    }\n  }\n\n  & .available {\n    overflow: scroll;\n    max-height: 900px;\n\n    /* Hide scrollbar for Chrome, Safari and Opera */\n    &::-webkit-scrollbar {\n      display: none;\n    }\n\n    -ms-overflow-style: none; /* IE and Edge */\n    scrollbar-width: none; /* Firefox */\n    min-width: 300px;\n    max-width: 300px;\n    min-height: 20px;\n    border: solid 1px;\n\n    & > div {\n      outline: solid 1px;\n      padding: 0.2ex;\n      display: flex;\n      flex-wrap: nowrap;\n\n      & label {\n        flex-grow: 1;\n      }\n\n      & label.draggable {\n        cursor: grab;\n      }\n\n      & > * {\n        white-space: nowrap;\n      }\n\n      & input[type='checkbox'],\n      & .edit {\n        margin-left: 0.5ex;\n        margin-right: 0.5ex;\n      }\n\n      & input[type='checkbox']:not(:disabled),\n      & .edit {\n        cursor: pointer;\n      }\n    }\n  }\n}\n\n.slot-group-transforms {\n  height: 700px;\n  overflow: scroll;\n}\n</style>\n","<script setup lang=\"ts\">\nimport { MARKER_CIRCLE_DIAMETER } from '../../ts/builtin-config';\nimport { useAppStore } from '../../ts/stores/app';\n\nconst appStore = useAppStore();\n\nconst props = defineProps<{\n  readonly markerId: string;\n  x: number;\n  y: number;\n}>();\n</script>\n\n<template>\n  <div\n    class=\"marker\"\n    :style=\"{\n      '--marker-position-x': props.x,\n      '--marker-position-y': props.y,\n      '--marker-diameter': MARKER_CIRCLE_DIAMETER,\n    }\"\n  >\n    <div class=\"circle\"></div>\n    <span v-if=\"appStore.isDeveloperModeActive\">{{ props.markerId }}</span>\n  </div>\n</template>\n\n<style scoped lang=\"scss\">\n.marker {\n  --blur-radius: 15px;\n  --outline-width: 6px;\n  position: absolute;\n  left: calc(1px * var(--marker-position-x));\n  top: calc(1px * var(--marker-position-y));\n  width: calc(1px * var(--marker-diameter));\n  height: calc(1px * var(--marker-diameter));\n  transform-origin: top left;\n  transform: translate(-50%, -50%);\n\n  * {\n    pointer-events: none;\n    user-select: none;\n  }\n\n  display: grid;\n  place-items: center center;\n  font-family: sans-serif;\n  font-size: x-large;\n\n  .circle {\n    position: absolute;\n    width: 100%;\n    height: 100%;\n    border-radius: 50%;\n    background-color: rgb(211 211 211 / 50%);\n    outline: 6px solid rgb(0 0 0 / 75%);\n    filter: blur(var(--blur-radius));\n\n    &.active {\n      background-color: rgb(55 175 218 / 50%);\n    }\n  }\n}\n</style>\n","<script setup lang=\"ts\">\nimport type { Ref } from 'vue';\n\nimport { computed } from 'vue';\nimport '@fontsource/jost/latin-500.css'; // Medium weight\nimport '@fontsource/jost/latin-700.css'; // Bold weight\n\nimport { useConfigStore } from '../../ts/stores/config';\nimport { useModelStore } from '../../ts/stores/model';\nimport { Scores } from '../../ts/scores';\n\nconst {\n  config: { general },\n} = useConfigStore();\nconst { primaryLanguage, secondaryLanguage, scoreLabels } = general;\nconst { circularity: circularityLabels, happiness: happinessLabels } =\n  scoreLabels;\n\nconst modelStore = useModelStore();\n\ninterface ScoreInfo {\n  score: Ref<number>;\n  primaryLabel: string;\n  secondaryLabel: string;\n}\n\nconst circularity: ScoreInfo = {\n  score: computed(() => Scores.circularity(modelStore.record)),\n  primaryLabel: circularityLabels[primaryLanguage],\n  secondaryLabel: circularityLabels[secondaryLanguage],\n};\nconst happiness: ScoreInfo = {\n  score: computed(() => Scores.happiness(modelStore.record)),\n  primaryLabel: happinessLabels[primaryLanguage],\n  secondaryLabel: happinessLabels[secondaryLanguage],\n};\n\nconst scores = [circularity, happiness];\n\nconst fractionDigits = 1;\nconst format = (score: number) => `${(score * 100).toFixed(fractionDigits)}%`;\n</script>\n\n<template>\n  <div class=\"scores\">\n    <table>\n      <template v-for=\"{ score, primaryLabel, secondaryLabel } in scores\">\n        <tr>\n          <td>\n            <span class=\"primary\">{{ primaryLabel }}&nbsp;</span\n            ><span class=\"secondary\">{{ secondaryLabel }}</span>\n          </td>\n          <td class=\"primary score-column\">{{ format(score.value) }}</td>\n        </tr>\n      </template>\n    </table>\n  </div>\n</template>\n\n<style lang=\"scss\" scoped>\n.scores {\n  display: table;\n  table-layout: fixed;\n  font-size: 38px;\n  position: absolute;\n  padding-bottom: 1.4ex;\n  padding-right: 2.5ex;\n\n  & .table-row {\n    display: table-row;\n  }\n\n  & .table-cell {\n    display: table-cell;\n  }\n\n  & .score-column {\n    width: 9ex;\n    text-align: right;\n  }\n\n  & .primary {\n    font-family: 'Jost', sans-serif;\n    font-weight: 700;\n  }\n\n  & .secondary {\n    font-family: 'Jost', sans-serif;\n    font-weight: 500;\n  }\n}\n</style>\n","<script setup lang=\"ts\">\nimport { ref, toRaw, watch } from 'vue';\nimport yaml from 'js-yaml';\n\nimport type { Config } from '../../ts/config/config-schema';\n\nimport { useParameterTransformsStore } from '../../ts/stores/parameter-transforms';\nimport { useSlotGroupsStore } from '../../ts/stores/slot-groups';\nimport { useConfigStore } from '../../ts/stores/config';\nimport { useModelStore } from '../../ts/stores/model';\nimport { validateConfig } from '../../ts/config/config-schema';\nimport { ConfigLoader } from '../../ts/config/config-loader';\n\nconst { config } = useConfigStore();\n\nconst parameterTransformsStore = useParameterTransformsStore();\nconst { parameterTransforms } = parameterTransformsStore;\nconst { rebuildInternalSlotGroup } = useSlotGroupsStore();\nconst { initialParameters, transformedParametersExt } = useModelStore();\n\nconst OState = {\n  SUCCESS: 0,\n  UNPROCESSED: 1,\n  UNKNOWN: 2,\n  ERROR: 3,\n} as const;\ntype State = (typeof OState)[keyof typeof OState];\n\nconst stateTooltips = {\n  [OState.SUCCESS]: 'Successfully imported.',\n  [OState.UNPROCESSED]: '',\n  [OState.UNKNOWN]: 'Unknown import state. Please check the developer console.',\n  [OState.ERROR]: 'Failed to import. Please check the developer console.',\n} as const;\n\nconst parameterTransformsYamlText = ref('');\nconst parameterTransformImportState = ref<State>(OState.UNPROCESSED);\nconst initialParametersYamlText = ref('');\nconst initialParametersImportState = ref<State>(OState.UNPROCESSED);\n\nfunction deriveConfig(partialConfigText: string): Config | null {\n  try {\n    const unvalidatedPartialConfig = (yaml.load(partialConfigText) ??\n      {}) as object;\n    const newConfig = ConfigLoader.merge(\n      structuredClone(toRaw(config)),\n      unvalidatedPartialConfig,\n    );\n    const validationResult = validateConfig(newConfig);\n\n    if (!validationResult.ok) {\n      /* eslint-disable no-console */\n      const {\n        error: { errors, explanation },\n      } = validationResult;\n      console.error('Invalid configuration:', newConfig);\n      console.error(explanation);\n      console.error(\n        'Issues reported by the configuration validator:',\n        ...(errors ?? []),\n      );\n      return null;\n    }\n\n    return validationResult.data;\n  } catch (error) {\n    console.error('Failed to parse YAML:', error);\n    return null;\n  }\n}\n\nasync function importInitialParameters() {\n  const newConfig = deriveConfig(initialParametersYamlText.value);\n  initialParametersImportState.value =\n    newConfig === null ? OState.ERROR : OState.UNKNOWN;\n  if (!newConfig) return;\n\n  const {\n    model: { initialParameters: validatedInitialParameters },\n  } = newConfig;\n\n  Object.assign(initialParameters, validatedInitialParameters);\n\n  initialParametersImportState.value = OState.SUCCESS;\n}\n\nasync function importParameterTransforms() {\n  const newConfig = deriveConfig(parameterTransformsYamlText.value);\n  parameterTransformImportState.value =\n    newConfig === null ? OState.ERROR : OState.UNKNOWN;\n  if (!newConfig) return;\n\n  const { parameterTransforms: validatedParameterTransforms } = newConfig;\n\n  const transformParametersPromise = new Promise((resolve, reject) => {\n    watch(transformedParametersExt, resolve, { deep: true, once: true });\n  });\n\n  parameterTransformsStore.replaceAll(validatedParameterTransforms);\n  rebuildInternalSlotGroup();\n\n  await transformParametersPromise;\n  parameterTransformImportState.value = OState.SUCCESS;\n}\n\nfunction exportInitialParameters() {\n  initialParametersImportState.value = OState.UNPROCESSED;\n  const exportObj = {\n    model: { initialParameters: initialParameters },\n  };\n  initialParametersYamlText.value = yaml.dump(exportObj);\n  console.log(initialParametersYamlText.value);\n}\n\nfunction exportParameterTransforms() {\n  parameterTransformImportState.value = OState.UNPROCESSED;\n  const exportObj = {\n    parameterTransforms: parameterTransforms.map(({ id, script }) => ({\n      id,\n      script,\n    })),\n  };\n  parameterTransformsYamlText.value = yaml.dump(exportObj);\n  console.log(parameterTransformsYamlText.value);\n}\n</script>\n\n<template>\n  Initial parameters:<br />\n  <textarea\n    name=\"initialParametersYamlText\"\n    v-model=\"initialParametersYamlText\"\n    rows=\"15\"\n    cols=\"80\"\n    :class=\"{\n      success: initialParametersImportState === OState.SUCCESS,\n      error: initialParametersImportState === OState.ERROR,\n    }\"\n    :title=\"stateTooltips[initialParametersImportState]\"\n    @input=\"initialParametersImportState = OState.UNPROCESSED\"\n  ></textarea>\n  <div>\n    <input type=\"button\" value=\"Import\" @click=\"importInitialParameters()\" />\n    <input type=\"button\" value=\"Export\" @click=\"exportInitialParameters()\" />\n  </div>\n  <br />\n  Parameter transforms:<br />\n  <textarea\n    name=\"parameterTransformYamlText\"\n    v-model=\"parameterTransformsYamlText\"\n    rows=\"15\"\n    cols=\"80\"\n    :class=\"{\n      success: parameterTransformImportState === OState.SUCCESS,\n      unknown: parameterTransformImportState === OState.UNKNOWN,\n      error: parameterTransformImportState === OState.ERROR,\n    }\"\n    :title=\"stateTooltips[parameterTransformImportState]\"\n    @input=\"parameterTransformImportState = OState.UNPROCESSED\"\n  ></textarea>\n  <div>\n    <input type=\"button\" value=\"Import\" @click=\"importParameterTransforms()\" />\n    <input type=\"button\" value=\"Export\" @click=\"exportParameterTransforms()\" />\n  </div>\n</template>\n\n<style lang=\"scss\" scoped>\n.success {\n  background-color: lightgreen;\n}\n\n.unknown {\n  background-color: lightyellow;\n}\n\n.error {\n  background-color: lightcoral;\n}\n</style>\n","<script setup lang=\"ts\">\nimport { ref } from 'vue';\n\nimport ControlPanelTabInitialParameters from './ControlPanelTabInitialParameters.vue';\nimport ControlPanelTabParameterTransforms from './ControlPanelTabParameterTransforms.vue';\nimport ControlPanelTabCharts from './ControlPanelTabCharts.vue';\nimport ControlPanelTabImportExport from './ControlPanelTabImportExport.vue';\nimport ControlPanelTabMisc from './ControlPanelTabMisc.vue';\n\nconst props = defineProps({ disabled: Boolean });\n\nconst diagramsTabDisabled = ref(true);\n</script>\n\n<template>\n  <div class=\"control-panel\" :class=\"{ hidden: props.disabled }\">\n    <nav>\n      <div class=\"nav nav-tabs\" id=\"nav-tab\" role=\"tablist\">\n        <button\n          class=\"nav-link\"\n          id=\"nav-initial-parameters-tab\"\n          data-bs-toggle=\"tab\"\n          data-bs-target=\"#nav-initial-parameters\"\n          type=\"button\"\n          role=\"tab\"\n          aria-controls=\"nav-initial-parameters\"\n          aria-selected=\"false\"\n        >\n          Initial parameters\n        </button>\n        <button\n          class=\"nav-link active\"\n          id=\"nav-parameter-transforms-tab\"\n          data-bs-toggle=\"tab\"\n          data-bs-target=\"#nav-parameter-transforms\"\n          type=\"button\"\n          role=\"tab\"\n          aria-controls=\"nav-parameter-transforms\"\n          aria-selected=\"true\"\n        >\n          Parameter transforms\n        </button>\n        <button\n          class=\"nav-link\"\n          id=\"nav-diagrams-tab\"\n          data-bs-toggle=\"tab\"\n          data-bs-target=\"#nav-diagrams\"\n          type=\"button\"\n          role=\"tab\"\n          aria-controls=\"nav-diagrams\"\n          aria-selected=\"false\"\n          v-on=\"{\n            'hidden.bs.tab': () => (diagramsTabDisabled = true),\n            'show.bs.tab': () => (diagramsTabDisabled = false),\n          }\"\n        >\n          Diagrams\n        </button>\n        <button\n          class=\"nav-link\"\n          id=\"nav-import-export-tab\"\n          data-bs-toggle=\"tab\"\n          data-bs-target=\"#nav-import-export\"\n          type=\"button\"\n          role=\"tab\"\n          aria-controls=\"nav-import-export\"\n          aria-selected=\"false\"\n        >\n          Import/Export\n        </button>\n        <button\n          class=\"nav-link\"\n          id=\"nav-misc-tab\"\n          data-bs-toggle=\"tab\"\n          data-bs-target=\"#nav-misc\"\n          type=\"button\"\n          role=\"tab\"\n          aria-controls=\"nav-misc\"\n          aria-selected=\"true\"\n        >\n          Misc\n        </button>\n      </div>\n    </nav>\n    <div class=\"tab-content\" id=\"nav-tabContent\">\n      <div\n        class=\"tab-pane show\"\n        id=\"nav-initial-parameters\"\n        role=\"tabpanel\"\n        aria-labelledby=\"nav-initial-parameters-tab\"\n        tabindex=\"0\"\n      >\n        <ControlPanelTabInitialParameters />\n      </div>\n      <div\n        class=\"tab-pane show active\"\n        id=\"nav-parameter-transforms\"\n        role=\"tabpanel\"\n        aria-labelledby=\"nav-parameter-transforms-tab\"\n        tabindex=\"0\"\n      >\n        <ControlPanelTabParameterTransforms />\n      </div>\n      <div\n        class=\"tab-pane show\"\n        id=\"nav-diagrams\"\n        role=\"tabpanel\"\n        aria-labelledby=\"nav-diagrams-tab\"\n        tabindex=\"0\"\n      >\n        <ControlPanelTabCharts\n          :disabled=\"props.disabled || diagramsTabDisabled\"\n        />\n      </div>\n      <div\n        class=\"tab-pane show\"\n        id=\"nav-import-export\"\n        role=\"tabpanel\"\n        aria-labelledby=\"nav-import-export-tab\"\n        tabindex=\"0\"\n      >\n        <ControlPanelTabImportExport />\n      </div>\n      <div\n        class=\"tab-pane show\"\n        id=\"nav-misc\"\n        role=\"tabpanel\"\n        aria-labelledby=\"nav-misc-tab\"\n        tabindex=\"0\"\n      >\n        <ControlPanelTabMisc />\n      </div>\n    </div>\n  </div>\n</template>\n\n<style lang=\"scss\" scoped>\n.control-panel {\n  // this node is designed for 1920x1080 and than scaled up 2x\n  position: absolute;\n  top: 0;\n  right: 0;\n  width: calc(1px * var(--app-width) / 4);\n  height: 50%;\n  box-sizing: border-box;\n  border-left: solid 1px;\n  background-color: white;\n  transform-origin: top right;\n  transform: scale(2);\n\n  & nav {\n    padding-top: 1ex;\n\n    & button[disabled] {\n      text-decoration: line-through;\n    }\n  }\n\n  & .tab-pane {\n    padding: 1em;\n  }\n}\n</style>\n","<script setup lang=\"ts\">\nimport type { DeepReadonly, Writable } from 'ts-essentials';\n\nimport { difference } from 'lodash';\nimport { ref, computed, watchEffect, watch } from 'vue';\nimport { useArrayFilter } from '@vueuse/core';\n\nimport type { Marker } from '../../ts/stores/marker';\nimport type { SlotConfig } from '../../ts/config/config-schema';\n\nimport { SLOT_CIRCLE_DIAMETER } from '../../ts/builtin-config';\nimport { useConfigStore } from '../../ts/stores/config';\nimport { useAppStore } from '../../ts/stores/app';\nimport { useMarkerStore } from '../../ts/stores/marker';\nimport { useSlotStore } from '../../ts/stores/slot';\n\nimport { Circle } from '../../ts/util/geometry/circle';\n\nconst props = defineProps<{\n  readonly slotGroupId: string;\n  readonly slotConfig: DeepReadonly<SlotConfig>;\n}>();\n\nconst { slotConfig } = props;\n\nconst slotGroupId = ref(props.slotGroupId);\nconst slotId = `${slotGroupId.value}-${slotConfig.id}`;\n\nconst {\n  config: {\n    interaction: { assets },\n  },\n  toAssetUrl,\n  extractAssetPosition,\n} = useConfigStore();\nconst markerSlotActiveUrl = toAssetUrl(assets.markerSlotActive.url);\nconst markerSlotInactiveUrl = toAssetUrl(assets.markerSlotInactive.url);\nconst markerSlotActivePosition = extractAssetPosition(markerSlotActiveUrl);\nconst markerSlotInactivePosition = extractAssetPosition(markerSlotInactiveUrl);\n\nconst appStore = useAppStore();\n\nconst markerStore = useMarkerStore();\nconst { markerPositions } = markerStore;\n\nconst slotStore = useSlotStore();\n\nconst slotCircle = new Circle(\n  slotConfig.x,\n  slotConfig.y,\n  SLOT_CIRCLE_DIAMETER / 2,\n);\n\nlet previousContainedMarkers = new Array<Marker>();\n\nconst containedMarkers = useArrayFilter(\n  markerPositions as Writable<typeof markerPositions>,\n  (m) => slotCircle.containsPoint(m),\n);\n\nwatchEffect(() => {\n  const added = difference(containedMarkers.value, previousContainedMarkers);\n  const removed = difference(previousContainedMarkers, containedMarkers.value);\n  removed.forEach(({ id: markerId }) =>\n    slotStore.addActivation({ slotId, markerId }),\n  );\n  added.forEach(({ id: markerId }) =>\n    slotStore.addActivation({ slotId, markerId }),\n  );\n  previousContainedMarkers = containedMarkers.value;\n});\n\nconst isActive = computed(() => containedMarkers.value.length > 0);\n\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nconst emit = defineEmits<{\n  activate: [ids: { slotId: string; slotGroupId: string }];\n  deactivate: [ids: { slotId: string; slotGroupId: string }];\n}>();\n\nwatch(\n  () => isActive.value,\n  (isActiveNow, isActivePrev) => {\n    if (isActiveNow && !isActivePrev) {\n      emit('activate', { slotId, slotGroupId: slotGroupId.value });\n    } else {\n      emit('deactivate', { slotId, slotGroupId: slotGroupId.value });\n    }\n  },\n);\n</script>\n\n<template>\n  <div\n    :data-slot-id=\"slotConfig.id\"\n    class=\"slot\"\n    :style=\"{\n      '--slot-x': slotConfig.x,\n      '--slot-y': slotConfig.y,\n      '--slot-angle': `${slotConfig.angle}deg`,\n      '--slot-diameter': SLOT_CIRCLE_DIAMETER,\n    }\"\n  >\n    <div class=\"asset-container\">\n      <img\n        v-show=\"isActive\"\n        :src=\"markerSlotActiveUrl.href\"\n        :alt=\"`${slotConfig.id}-active`\"\n        :style=\"{\n          '--asset-x': markerSlotActivePosition.x,\n          '--asset-y': markerSlotActivePosition.y,\n        }\"\n      />\n      <img\n        v-show=\"!isActive\"\n        :src=\"markerSlotInactiveUrl.href\"\n        :alt=\"`${slotConfig.id}-inactive`\"\n        :style=\"{\n          '--asset-x': markerSlotInactivePosition.x,\n          '--asset-y': markerSlotInactivePosition.y,\n        }\"\n      />\n    </div>\n    <div\n      v-if=\"appStore.isDeveloperModeActive\"\n      class=\"circle\"\n      :class=\"{ active: isActive, inactive: !isActive }\"\n    ></div>\n    <div v-if=\"appStore.isDeveloperModeActive\" class=\"label\">\n      {{ slotGroupId }}<br />{{ slotConfig.id }}\n    </div>\n  </div>\n</template>\n\n<style scoped lang=\"scss\">\n.slot {\n  left: calc(1px * var(--slot-x));\n  top: calc(1px * var(--slot-y));\n  width: calc(1px * var(--slot-diameter));\n  height: calc(1px * var(--slot-diameter));\n  position: absolute;\n  transform-origin: center;\n  transform: translate(-50%, -50%) rotate(var(--slot-angle));\n\n  & > .asset-container {\n    position: absolute;\n    transform: translate(0%, 50%);\n    top: 0;\n    left: 0;\n    width: 100%;\n    height: 100%;\n\n    & > img {\n      position: absolute;\n      transform: translateX(calc(1px * var(--asset-x)))\n        translateY(calc(1px * var(--asset-y)));\n    }\n  }\n\n  & > .circle {\n    position: absolute;\n    left: 0;\n    top: 0;\n    width: 100%;\n    height: 100%;\n    border-radius: 50%;\n    box-sizing: content-box;\n    outline: solid 2px;\n\n    &.inactive {\n      outline-color: darkgray;\n    }\n\n    &.active {\n      outline-color: black;\n    }\n  }\n\n  & .label {\n    position: absolute;\n  }\n\n  * {\n    pointer-events: none;\n    user-select: none;\n  }\n\n  display: grid;\n  place-items: center center;\n  font-family: sans-serif;\n  font-size: x-large;\n  text-align: center;\n}\n</style>\n","<script setup lang=\"ts\">\nimport { computed } from 'vue';\n\nimport { useConfigStore } from '../../ts/stores/config';\nimport { useAppStore } from '../../ts/stores/app';\n\nconst props = defineProps<{\n  readonly url: string;\n  readonly label: string;\n  active: boolean;\n}>();\n\nconst { toAssetUrl, extractAssetPosition } = useConfigStore();\nconst appStore = useAppStore();\n\nconst assetUrl = computed(() => toAssetUrl(props.url));\n\n// const position = computed(() => extractAssetPosition(assetUrl.value));\n// Keep the position fixed for now\nconst position = { x: 0, y: 0 };\n</script>\n\n<template>\n  <div\n    class=\"action-card\"\n    :class=\"{ active: props.active }\"\n    :style=\"{\n      '--card-x': position.x,\n      '--card-y': position.y,\n    }\"\n  >\n    <img :src=\"assetUrl.href\" :alt=\"label\" class=\"image\" />\n    <div class=\"label\" v-if=\"appStore.isDeveloperModeActive\">\n      <span class=\"highlight\">{{ label }}</span>\n    </div>\n  </div>\n</template>\n\n<style scoped lang=\"scss\">\n.action-card {\n  --inactive-card-filter: invert(1) brightness(0.4) invert(1);\n  position: absolute;\n  left: calc(1px * var(--card-x));\n  top: calc(1px * var(--card-y));\n\n  &:not(.active) {\n    filter: var(--inactive-card-filter);\n  }\n\n  .image {\n    position: relative;\n  }\n\n  .label {\n    position: absolute;\n    top: 0;\n    left: 0;\n    width: 100%;\n    height: 100%;\n    display: grid;\n    place-items: center center;\n    font-family: sans-serif;\n    font-size: x-large;\n    text-align: center;\n  }\n\n  .highlight {\n    background: #fff7;\n  }\n}\n</style>\n","<script setup lang=\"ts\">\nimport type { DeepReadonly } from 'ts-essentials';\n\nimport type { CardSlotConfig, CardConfig } from '../../ts/config/config-schema';\n\nimport { useAppStore } from '../../ts/stores/app';\n\nimport GameCard from './GameCard.vue';\n\nconst props = defineProps<{\n  readonly cardSlotConfig: DeepReadonly<CardSlotConfig>;\n  cardConfig: DeepReadonly<CardConfig> | null;\n  active: boolean;\n}>();\n\nconst appStore = useAppStore();\n</script>\n\n<template>\n  <div\n    :style=\"{\n      '--card-x': cardSlotConfig.x,\n      '--card-y': cardSlotConfig.y,\n      '--card-angle': cardSlotConfig.angle,\n    }\"\n    class=\"card-slot\"\n    :class=\"{ 'dev-mode': appStore.isDeveloperModeActive }\"\n  >\n    <div class=\"label\" v-if=\"appStore.isDeveloperModeActive\">\n      {{ cardSlotConfig.id }}\n    </div>\n    <template v-if=\"cardConfig !== null\">\n      <GameCard\n        :url=\"cardConfig.url\"\n        :label=\"cardConfig.parameterTransformId\"\n        :active=\"props.active\"\n      />\n    </template>\n  </div>\n</template>\n\n<style scoped lang=\"scss\">\n.card-slot {\n  position: absolute;\n  width: 202px;\n  height: 275px;\n  transform-origin: top left;\n  --card-x-px: calc(1px * var(--card-x));\n  --card-y-px: calc(1px * var(--card-y));\n  transform: translateX(var(--card-x-px)) translateY(var(--card-y-px))\n    rotate(calc(1deg * var(--card-angle)));\n\n  &.dev-mode {\n    background-color: rgba(255, 255, 255, 0.5);\n    outline: 2px dotted gray;\n  }\n\n  & > .label {\n    position: absolute;\n    top: 0;\n    left: 0;\n    width: 100%;\n    height: 100%;\n    display: grid;\n    place-items: center center;\n    font-family: sans-serif;\n    font-size: x-large;\n    text-align: center;\n  }\n}\n</style>\n","<script setup lang=\"ts\">\nimport { strict as assert } from 'assert';\nimport { ref, watch, watchEffect, onMounted } from 'vue';\nimport { onKeyStroke } from '@vueuse/core';\n\nimport PointerMarkerPanel from './PointerMarkerPanel.vue';\nimport TuioMarkerPanel from './TuioMarkerPanel.vue';\nimport ScoreTable from './ScoreTable.vue';\nimport ControlPanel from './ControlPanel.vue';\nimport TriggeredOverlay from './TriggeredOverlay.vue';\nimport BasicSlotGroup from './BasicSlotGroup.vue';\nimport ActionCardSlotGroup from './ActionCardSlotGroup.vue';\nimport EventCardSlotGroup from './EventCardSlotGroup.vue';\nimport ModelVisualization from './ModelVisualization.vue';\n\nimport { HOTKEYS } from '../../ts/builtin-config';\nimport { useOptionStore } from '../../ts/stores/options';\nimport { useConfigStore } from '../../ts/stores/config';\nimport { useAppStore } from '../../ts/stores/app';\nimport { useModelStore } from '../../ts/stores/model';\nimport { ignorePromise } from '../../ts/util/ignore-promise';\nimport { ModelSimulator } from '../../ts/model-simulator';\nimport {\n  CircularEconomyModel,\n  type FlowIds,\n  type ParameterIds,\n  type StockIds,\n  type VariableIds,\n} from '../../ts/circular-economy-model';\nimport { Runner } from '../../ts/util/runner';\n\nconst options = useOptionStore();\nconst { config } = useConfigStore();\nconst appStore = useAppStore();\nconst modelStore = useModelStore();\n\nconst model = new CircularEconomyModel();\nconst modelSimulator = new ModelSimulator<\n  StockIds,\n  FlowIds,\n  VariableIds,\n  ParameterIds\n>(\n  model,\n  { ...config.model.initialStocks },\n  { ...config.model.initialParameters },\n  0.0,\n  config.simulation.deltaPerSecond,\n  config.simulation.maxStepSize,\n);\n\nconst runner = new Runner();\n\nwatchEffect(() => {\n  if (appStore.isPlaying) runner.play();\n  else runner.pause();\n});\n\nwatchEffect(() => {\n  Object.assign(modelSimulator.parameters, {\n    ...modelStore.transformedParameters,\n  });\n  console.log('Update model parameters', modelSimulator.parameters);\n});\n\nrunner.tick();\n\nwatch(\n  () => appStore.isFullscreen,\n  (isFullscreen) => {\n    console.log('Fullscreen toogled');\n    ignorePromise(\n      isFullscreen\n        ? document.documentElement.requestFullscreen()\n        : document.exitFullscreen(),\n    );\n  },\n);\n\nconst enableControlPanel = ref(false);\n\nconst toggleControlPanel = () => {\n  enableControlPanel.value = !enableControlPanel.value;\n};\n\nconst toggleDeveloperMode = () => {\n  appStore.isDeveloperModeActive = !appStore.isDeveloperModeActive;\n};\n\nconst togglePlayPause = () => {\n  appStore.isPlaying = !appStore.isPlaying;\n};\n\nconst toggleFullscreen = () => {\n  appStore.isFullscreen = !appStore.isFullscreen;\n};\n\nonKeyStroke(HOTKEYS.controlPanel.key, toggleControlPanel);\nonKeyStroke(HOTKEYS.developerMode.key, toggleDeveloperMode);\nonKeyStroke(HOTKEYS.run.key, togglePlayPause);\nonKeyStroke(HOTKEYS.fullscreen.key, toggleFullscreen);\n\nwatchEffect(() => {\n  if (appStore.isPlaying) runner.play();\n  else runner.pause();\n});\n\nconst modelVisualization = ref<typeof ModelVisualization | null>(null);\nonMounted(() => {\n  const tick = (deltaMs: DOMHighResTimeStamp) => {\n    const { t: lastT } = modelSimulator.record;\n    modelSimulator.tick(deltaMs);\n    const { t: currentT } = modelSimulator.record;\n    const deltaT = currentT - lastT;\n\n    const { record } = modelSimulator;\n    modelStore.$patch({ record });\n    assert(modelVisualization.value !== null);\n    modelVisualization.value.update(deltaMs, deltaT, modelSimulator.record);\n  };\n  runner.on('tick', tick);\n});\n</script>\n\n<template>\n  <div class=\"fill\">\n    <div id=\"illustration-panel\" class=\"illustration-panel fill\">\n      <TriggeredOverlay\n        v-for=\"triggerConfig in config.triggers\"\n        :key=\"triggerConfig.id\"\n        :trigger-config=\"triggerConfig\"\n      >\n      </TriggeredOverlay>\n    </div>\n    <div ref=\"\" class=\"viz-panel fill\">\n      <ModelVisualization ref=\"modelVisualization\" />\n      <ScoreTable class=\"score-top-left\" />\n      <ScoreTable class=\"score-bottom-right\" />\n    </div>\n    <div class=\"slot-panel fill\">\n      <template\n        v-for=\"slotGroupConfig in config.interaction.slotGroups\"\n        :key=\"slotGroupConfig.id\"\n      >\n        <BasicSlotGroup\n          :slot-group-config=\"slotGroupConfig\"\n          v-if=\"slotGroupConfig.type === 'basic'\"\n        ></BasicSlotGroup>\n        <ActionCardSlotGroup\n          :slot-group-config=\"slotGroupConfig\"\n          v-if=\"slotGroupConfig.type === 'action-card'\"\n        ></ActionCardSlotGroup>\n        <EventCardSlotGroup\n          :slot-group-config=\"slotGroupConfig\"\n          v-if=\"slotGroupConfig.type === 'event-card'\"\n        ></EventCardSlotGroup>\n      </template>\n      <PointerMarkerPanel v-if=\"options.usePointerMarkers\"></PointerMarkerPanel>\n      <TuioMarkerPanel\n        v-if=\"options.useTuioMarkers\"\n        class=\"pointer-events-fallthrough\"\n      ></TuioMarkerPanel>\n    </div>\n  </div>\n  <ControlPanel\n    @keydown=\"$event.stopPropagation()\"\n    :disabled=\"!enableControlPanel\"\n  />\n</template>\n\n<style lang=\"scss\" scoped>\n.illustration-panel {\n  background-color: white;\n}\n\n.viz-panel {\n  & > #model-viz-container {\n    width: calc(1px * var(--svg-width));\n    transform: scale(var(--svg-scale-factor));\n    transform-origin: top left;\n  }\n}\n\n.slot-panel {\n  touch-action: none;\n}\n\n.pointer-events-fallthrough {\n  pointer-events: none;\n}\n\n.score {\n  position: absolute;\n}\n\n.score-top-left {\n  @extend .score;\n  top: 0;\n  left: 0;\n  transform-origin: center;\n  transform: rotate(180deg);\n}\n\n.score-bottom-right {\n  @extend .score;\n  bottom: 0;\n  right: 0;\n}\n</style>\n"],"names":[],"version":3,"file":"index.2d9b3f50.css.map"}